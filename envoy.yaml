static_resources:
  listeners:
  - name: listener_0
    address:
      socket_address:
        protocol: TCP
        address: 0.0.0.0
        port_value: 8091 # Envoy listens here for gRPC-Web clients
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_http
          codec_type: AUTO
          # This adds access logging for every request that hits Envoy.
          # It's invaluable for debugging connection issues like CORS.
          access_log:
          - name: envoy.access_loggers.stdout
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
          route_config:
            name: local_route
            virtual_hosts:
            - name: backend
              domains: ["*"]
              # *** CORS policy is defined here, at the virtual host level ***
              cors:
                allow_origin_string_match:
                # Be explicit about allowed origins for better security and to resolve fetch errors.
                - exact: "http://localhost:5173"      # For local development
                - exact: "https://dxmultiomics.com" # For your deployed production frontend
                allow_methods: "GET, POST, OPTIONS" # OPTIONS is needed for CORS pre-flight requests
                allow_headers: "content-type, x-grpc-web, x-user-agent, x-firebase-id-token" # Add any custom headers your client sends
                expose_headers: "grpc-status, grpc-message" # Expose gRPC status headers to the client
                max_age: "1728000"
                allow_credentials: true
              routes:
              - match:
                  prefix: "/"
                route:
                  cluster: go_notification_service
                  # This is crucial for long-lived streams. It disables Envoy's idle timeout,
                  # preventing it from dropping the connection if no messages are sent.
                  idle_timeout: 0s
                  # ADD THIS: This disables the overall request timeout, which is also
                  # necessary for long-lived gRPC streams.
                  timeout: 0s


          http_filters:
          # This filter is essential for translating gRPC-Web requests to native gRPC.
          - name: envoy.filters.http.grpc_web
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb
          # The CORS filter is just a marker. The policy is defined in the virtual_host.
          - name: envoy.filters.http.cors
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
          # The router filter must be last.
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

  clusters:
  - name: go_notification_service
    connect_timeout: 10s
    type: LOGICAL_DNS
    dns_lookup_family: V4_ONLY
    lb_policy: ROUND_ROBIN
    # *** Also vital: The cluster must be configured for HTTP/2 if your backend is pure gRPC ***
    # This enables HTTP/2 protocol for communication between Envoy and your Go native gRPC server.
    typed_extension_protocol_options:
      envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
        "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
        explicit_http_config:
          http2_protocol_options: {} # This indicates the upstream uses HTTP/2
    load_assignment:
      cluster_name: go_notification_service
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: 127.0.0.1
                port_value: 8090 # Your Go native gRPC server port

admin:
  access_log_path: "/tmp/admin_access.log"
  address:
    socket_address:
      protocol: TCP
      address: 127.0.0.1
      port_value: 9000